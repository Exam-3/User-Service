// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: Item.proto

package item

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ItemService_AddItem_FullMethodName                 = "/item.ItemService/AddItem"
	ItemService_UpdateItem_FullMethodName              = "/item.ItemService/UpdateItem"
	ItemService_DeleteItem_FullMethodName              = "/item.ItemService/DeleteItem"
	ItemService_ListItems_FullMethodName               = "/item.ItemService/ListItems"
	ItemService_GetItem_FullMethodName                 = "/item.ItemService/GetItem"
	ItemService_SearchItems_FullMethodName             = "/item.ItemService/SearchItems"
	ItemService_AddRecyclingCenter_FullMethodName      = "/item.ItemService/AddRecyclingCenter"
	ItemService_SearchRecyclingCenters_FullMethodName  = "/item.ItemService/SearchRecyclingCenters"
	ItemService_SubmitItemsForRecycling_FullMethodName = "/item.ItemService/SubmitItemsForRecycling"
	ItemService_SendSwapRequest_FullMethodName         = "/item.ItemService/SendSwapRequest"
	ItemService_AcceptSwapRequest_FullMethodName       = "/item.ItemService/AcceptSwapRequest"
	ItemService_RejectSwapRequest_FullMethodName       = "/item.ItemService/RejectSwapRequest"
	ItemService_ListSwapRequests_FullMethodName        = "/item.ItemService/ListSwapRequests"
)

// ItemServiceClient is the client API for ItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemServiceClient interface {
	AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*ItemResponse, error)
	UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*ItemResponse, error)
	DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error)
	ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error)
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*ItemResponse, error)
	SearchItems(ctx context.Context, in *SearchItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error)
	AddRecyclingCenter(ctx context.Context, in *AddRecyclingCenterRequest, opts ...grpc.CallOption) (*RecyclingCenterResponse, error)
	SearchRecyclingCenters(ctx context.Context, in *SearchRecyclingCentersRequest, opts ...grpc.CallOption) (*ListRecyclingCentersResponse, error)
	SubmitItemsForRecycling(ctx context.Context, in *SubmitItemsForRecyclingRequest, opts ...grpc.CallOption) (*RecyclingSubmissionResponse, error)
	SendSwapRequest(ctx context.Context, in *SendSwapRequestRequest, opts ...grpc.CallOption) (*SwapResponse, error)
	AcceptSwapRequest(ctx context.Context, in *AcceptSwapRequestRequest, opts ...grpc.CallOption) (*SwapResponse, error)
	RejectSwapRequest(ctx context.Context, in *RejectSwapRequestRequest, opts ...grpc.CallOption) (*SwapResponse, error)
	ListSwapRequests(ctx context.Context, in *ListSwapRequestsRequest, opts ...grpc.CallOption) (*ListSwapRequestsResponse, error)
}

type itemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewItemServiceClient(cc grpc.ClientConnInterface) ItemServiceClient {
	return &itemServiceClient{cc}
}

func (c *itemServiceClient) AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, ItemService_AddItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, ItemService_UpdateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteItemResponse)
	err := c.cc.Invoke(ctx, ItemService_DeleteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListItemsResponse)
	err := c.cc.Invoke(ctx, ItemService_ListItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, ItemService_GetItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) SearchItems(ctx context.Context, in *SearchItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListItemsResponse)
	err := c.cc.Invoke(ctx, ItemService_SearchItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) AddRecyclingCenter(ctx context.Context, in *AddRecyclingCenterRequest, opts ...grpc.CallOption) (*RecyclingCenterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecyclingCenterResponse)
	err := c.cc.Invoke(ctx, ItemService_AddRecyclingCenter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) SearchRecyclingCenters(ctx context.Context, in *SearchRecyclingCentersRequest, opts ...grpc.CallOption) (*ListRecyclingCentersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRecyclingCentersResponse)
	err := c.cc.Invoke(ctx, ItemService_SearchRecyclingCenters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) SubmitItemsForRecycling(ctx context.Context, in *SubmitItemsForRecyclingRequest, opts ...grpc.CallOption) (*RecyclingSubmissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecyclingSubmissionResponse)
	err := c.cc.Invoke(ctx, ItemService_SubmitItemsForRecycling_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) SendSwapRequest(ctx context.Context, in *SendSwapRequestRequest, opts ...grpc.CallOption) (*SwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwapResponse)
	err := c.cc.Invoke(ctx, ItemService_SendSwapRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) AcceptSwapRequest(ctx context.Context, in *AcceptSwapRequestRequest, opts ...grpc.CallOption) (*SwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwapResponse)
	err := c.cc.Invoke(ctx, ItemService_AcceptSwapRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) RejectSwapRequest(ctx context.Context, in *RejectSwapRequestRequest, opts ...grpc.CallOption) (*SwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwapResponse)
	err := c.cc.Invoke(ctx, ItemService_RejectSwapRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) ListSwapRequests(ctx context.Context, in *ListSwapRequestsRequest, opts ...grpc.CallOption) (*ListSwapRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSwapRequestsResponse)
	err := c.cc.Invoke(ctx, ItemService_ListSwapRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemServiceServer is the server API for ItemService service.
// All implementations must embed UnimplementedItemServiceServer
// for forward compatibility
type ItemServiceServer interface {
	AddItem(context.Context, *AddItemRequest) (*ItemResponse, error)
	UpdateItem(context.Context, *UpdateItemRequest) (*ItemResponse, error)
	DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error)
	ListItems(context.Context, *ListItemsRequest) (*ListItemsResponse, error)
	GetItem(context.Context, *GetItemRequest) (*ItemResponse, error)
	SearchItems(context.Context, *SearchItemsRequest) (*ListItemsResponse, error)
	AddRecyclingCenter(context.Context, *AddRecyclingCenterRequest) (*RecyclingCenterResponse, error)
	SearchRecyclingCenters(context.Context, *SearchRecyclingCentersRequest) (*ListRecyclingCentersResponse, error)
	SubmitItemsForRecycling(context.Context, *SubmitItemsForRecyclingRequest) (*RecyclingSubmissionResponse, error)
	SendSwapRequest(context.Context, *SendSwapRequestRequest) (*SwapResponse, error)
	AcceptSwapRequest(context.Context, *AcceptSwapRequestRequest) (*SwapResponse, error)
	RejectSwapRequest(context.Context, *RejectSwapRequestRequest) (*SwapResponse, error)
	ListSwapRequests(context.Context, *ListSwapRequestsRequest) (*ListSwapRequestsResponse, error)
	mustEmbedUnimplementedItemServiceServer()
}

// UnimplementedItemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedItemServiceServer struct {
}

func (UnimplementedItemServiceServer) AddItem(context.Context, *AddItemRequest) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedItemServiceServer) UpdateItem(context.Context, *UpdateItemRequest) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedItemServiceServer) DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedItemServiceServer) ListItems(context.Context, *ListItemsRequest) (*ListItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItems not implemented")
}
func (UnimplementedItemServiceServer) GetItem(context.Context, *GetItemRequest) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedItemServiceServer) SearchItems(context.Context, *SearchItemsRequest) (*ListItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchItems not implemented")
}
func (UnimplementedItemServiceServer) AddRecyclingCenter(context.Context, *AddRecyclingCenterRequest) (*RecyclingCenterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecyclingCenter not implemented")
}
func (UnimplementedItemServiceServer) SearchRecyclingCenters(context.Context, *SearchRecyclingCentersRequest) (*ListRecyclingCentersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRecyclingCenters not implemented")
}
func (UnimplementedItemServiceServer) SubmitItemsForRecycling(context.Context, *SubmitItemsForRecyclingRequest) (*RecyclingSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitItemsForRecycling not implemented")
}
func (UnimplementedItemServiceServer) SendSwapRequest(context.Context, *SendSwapRequestRequest) (*SwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSwapRequest not implemented")
}
func (UnimplementedItemServiceServer) AcceptSwapRequest(context.Context, *AcceptSwapRequestRequest) (*SwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptSwapRequest not implemented")
}
func (UnimplementedItemServiceServer) RejectSwapRequest(context.Context, *RejectSwapRequestRequest) (*SwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectSwapRequest not implemented")
}
func (UnimplementedItemServiceServer) ListSwapRequests(context.Context, *ListSwapRequestsRequest) (*ListSwapRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSwapRequests not implemented")
}
func (UnimplementedItemServiceServer) mustEmbedUnimplementedItemServiceServer() {}

// UnsafeItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemServiceServer will
// result in compilation errors.
type UnsafeItemServiceServer interface {
	mustEmbedUnimplementedItemServiceServer()
}

func RegisterItemServiceServer(s grpc.ServiceRegistrar, srv ItemServiceServer) {
	s.RegisterService(&ItemService_ServiceDesc, srv)
}

func _ItemService_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_AddItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).AddItem(ctx, req.(*AddItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).UpdateItem(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_DeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).DeleteItem(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_ListItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).ListItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_ListItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).ListItems(ctx, req.(*ListItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_SearchItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).SearchItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_SearchItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).SearchItems(ctx, req.(*SearchItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_AddRecyclingCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecyclingCenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).AddRecyclingCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_AddRecyclingCenter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).AddRecyclingCenter(ctx, req.(*AddRecyclingCenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_SearchRecyclingCenters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRecyclingCentersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).SearchRecyclingCenters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_SearchRecyclingCenters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).SearchRecyclingCenters(ctx, req.(*SearchRecyclingCentersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_SubmitItemsForRecycling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitItemsForRecyclingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).SubmitItemsForRecycling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_SubmitItemsForRecycling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).SubmitItemsForRecycling(ctx, req.(*SubmitItemsForRecyclingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_SendSwapRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSwapRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).SendSwapRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_SendSwapRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).SendSwapRequest(ctx, req.(*SendSwapRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_AcceptSwapRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptSwapRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).AcceptSwapRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_AcceptSwapRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).AcceptSwapRequest(ctx, req.(*AcceptSwapRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_RejectSwapRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectSwapRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).RejectSwapRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_RejectSwapRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).RejectSwapRequest(ctx, req.(*RejectSwapRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_ListSwapRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSwapRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).ListSwapRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_ListSwapRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).ListSwapRequests(ctx, req.(*ListSwapRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemService_ServiceDesc is the grpc.ServiceDesc for ItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "item.ItemService",
	HandlerType: (*ItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddItem",
			Handler:    _ItemService_AddItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _ItemService_UpdateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _ItemService_DeleteItem_Handler,
		},
		{
			MethodName: "ListItems",
			Handler:    _ItemService_ListItems_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _ItemService_GetItem_Handler,
		},
		{
			MethodName: "SearchItems",
			Handler:    _ItemService_SearchItems_Handler,
		},
		{
			MethodName: "AddRecyclingCenter",
			Handler:    _ItemService_AddRecyclingCenter_Handler,
		},
		{
			MethodName: "SearchRecyclingCenters",
			Handler:    _ItemService_SearchRecyclingCenters_Handler,
		},
		{
			MethodName: "SubmitItemsForRecycling",
			Handler:    _ItemService_SubmitItemsForRecycling_Handler,
		},
		{
			MethodName: "SendSwapRequest",
			Handler:    _ItemService_SendSwapRequest_Handler,
		},
		{
			MethodName: "AcceptSwapRequest",
			Handler:    _ItemService_AcceptSwapRequest_Handler,
		},
		{
			MethodName: "RejectSwapRequest",
			Handler:    _ItemService_RejectSwapRequest_Handler,
		},
		{
			MethodName: "ListSwapRequests",
			Handler:    _ItemService_ListSwapRequests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Item.proto",
}
