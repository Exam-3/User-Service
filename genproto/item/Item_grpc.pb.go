// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: Item.proto

package item

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ItemService_AddItemCategory_FullMethodName            = "/item.ItemService/AddItemCategory"
	ItemService_AddItem_FullMethodName                    = "/item.ItemService/AddItem"
	ItemService_UpdateItem_FullMethodName                 = "/item.ItemService/UpdateItem"
	ItemService_DeleteItem_FullMethodName                 = "/item.ItemService/DeleteItem"
	ItemService_ListItems_FullMethodName                  = "/item.ItemService/ListItems"
	ItemService_GetItem_FullMethodName                    = "/item.ItemService/GetItem"
	ItemService_SearchItems_FullMethodName                = "/item.ItemService/SearchItems"
	ItemService_AddRecyclingCenter_FullMethodName         = "/item.ItemService/AddRecyclingCenter"
	ItemService_SearchRecyclingCenters_FullMethodName     = "/item.ItemService/SearchRecyclingCenters"
	ItemService_SubmitItemsForRecycling_FullMethodName    = "/item.ItemService/SubmitItemsForRecycling"
	ItemService_SendSwapRequest_FullMethodName            = "/item.ItemService/SendSwapRequest"
	ItemService_AcceptSwapRequest_FullMethodName          = "/item.ItemService/AcceptSwapRequest"
	ItemService_RejectSwapRequest_FullMethodName          = "/item.ItemService/RejectSwapRequest"
	ItemService_ListSwapRequests_FullMethodName           = "/item.ItemService/ListSwapRequests"
	ItemService_AddRating_FullMethodName                  = "/item.ItemService/AddRating"
	ItemService_GetRatings_FullMethodName                 = "/item.ItemService/GetRatings"
	ItemService_Statistics_FullMethodName                 = "/item.ItemService/Statistics"
	ItemService_CreateEcoChallenge_FullMethodName         = "/item.ItemService/CreateEcoChallenge"
	ItemService_ParticipateEcoChallenge_FullMethodName    = "/item.ItemService/ParticipateEcoChallenge"
	ItemService_UpdateEcoChallengeProgress_FullMethodName = "/item.ItemService/UpdateEcoChallengeProgress"
	ItemService_CreateEcoTip_FullMethodName               = "/item.ItemService/CreateEcoTip"
	ItemService_GetEcoTips_FullMethodName                 = "/item.ItemService/GetEcoTips"
)

// ItemServiceClient is the client API for ItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemServiceClient interface {
	AddItemCategory(ctx context.Context, in *AddItemCategoryRequest, opts ...grpc.CallOption) (*AddItemCategoryResponse, error)
	AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*ItemResponse, error)
	UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*ItemResponse, error)
	DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error)
	ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error)
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*ItemResponse, error)
	SearchItems(ctx context.Context, in *SearchItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error)
	AddRecyclingCenter(ctx context.Context, in *AddRecyclingCenterRequest, opts ...grpc.CallOption) (*RecyclingCenterResponse, error)
	SearchRecyclingCenters(ctx context.Context, in *SearchRecyclingCentersRequest, opts ...grpc.CallOption) (*ListRecyclingCentersResponse, error)
	SubmitItemsForRecycling(ctx context.Context, in *SubmitItemsForRecyclingRequest, opts ...grpc.CallOption) (*RecyclingSubmissionResponse, error)
	SendSwapRequest(ctx context.Context, in *SendSwapRequestRequest, opts ...grpc.CallOption) (*SwapResponse, error)
	AcceptSwapRequest(ctx context.Context, in *AcceptSwapRequestRequest, opts ...grpc.CallOption) (*SwapResponse, error)
	RejectSwapRequest(ctx context.Context, in *RejectSwapRequestRequest, opts ...grpc.CallOption) (*SwapResponse, error)
	ListSwapRequests(ctx context.Context, in *ListSwapRequestsRequest, opts ...grpc.CallOption) (*ListSwapRequestsResponse, error)
	AddRating(ctx context.Context, in *AddRatingRequest, opts ...grpc.CallOption) (*Rating, error)
	GetRatings(ctx context.Context, in *GetRatingsRequest, opts ...grpc.CallOption) (*GetRatingsResponse, error)
	Statistics(ctx context.Context, in *GetStatisticsRequest, opts ...grpc.CallOption) (*GetStatisticsResponse, error)
	CreateEcoChallenge(ctx context.Context, in *CreateEcoChallengeRequest, opts ...grpc.CallOption) (*CreateEcoChallengeResponse, error)
	ParticipateEcoChallenge(ctx context.Context, in *ParticipateEcoChallengeRequest, opts ...grpc.CallOption) (*ParticipateEcoChallengeResponse, error)
	UpdateEcoChallengeProgress(ctx context.Context, in *UpdateEcoChallengeProgressRequest, opts ...grpc.CallOption) (*UpdateEcoChallengeProgressResponse, error)
	CreateEcoTip(ctx context.Context, in *CreateEcoTipRequest, opts ...grpc.CallOption) (*CreateEcoTipResponse, error)
	GetEcoTips(ctx context.Context, in *GetEcoTipsRequest, opts ...grpc.CallOption) (*GetEcoTipsResponse, error)
}

type itemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewItemServiceClient(cc grpc.ClientConnInterface) ItemServiceClient {
	return &itemServiceClient{cc}
}

func (c *itemServiceClient) AddItemCategory(ctx context.Context, in *AddItemCategoryRequest, opts ...grpc.CallOption) (*AddItemCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddItemCategoryResponse)
	err := c.cc.Invoke(ctx, ItemService_AddItemCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, ItemService_AddItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, ItemService_UpdateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteItemResponse)
	err := c.cc.Invoke(ctx, ItemService_DeleteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListItemsResponse)
	err := c.cc.Invoke(ctx, ItemService_ListItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, ItemService_GetItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) SearchItems(ctx context.Context, in *SearchItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListItemsResponse)
	err := c.cc.Invoke(ctx, ItemService_SearchItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) AddRecyclingCenter(ctx context.Context, in *AddRecyclingCenterRequest, opts ...grpc.CallOption) (*RecyclingCenterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecyclingCenterResponse)
	err := c.cc.Invoke(ctx, ItemService_AddRecyclingCenter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) SearchRecyclingCenters(ctx context.Context, in *SearchRecyclingCentersRequest, opts ...grpc.CallOption) (*ListRecyclingCentersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRecyclingCentersResponse)
	err := c.cc.Invoke(ctx, ItemService_SearchRecyclingCenters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) SubmitItemsForRecycling(ctx context.Context, in *SubmitItemsForRecyclingRequest, opts ...grpc.CallOption) (*RecyclingSubmissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecyclingSubmissionResponse)
	err := c.cc.Invoke(ctx, ItemService_SubmitItemsForRecycling_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) SendSwapRequest(ctx context.Context, in *SendSwapRequestRequest, opts ...grpc.CallOption) (*SwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwapResponse)
	err := c.cc.Invoke(ctx, ItemService_SendSwapRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) AcceptSwapRequest(ctx context.Context, in *AcceptSwapRequestRequest, opts ...grpc.CallOption) (*SwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwapResponse)
	err := c.cc.Invoke(ctx, ItemService_AcceptSwapRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) RejectSwapRequest(ctx context.Context, in *RejectSwapRequestRequest, opts ...grpc.CallOption) (*SwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwapResponse)
	err := c.cc.Invoke(ctx, ItemService_RejectSwapRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) ListSwapRequests(ctx context.Context, in *ListSwapRequestsRequest, opts ...grpc.CallOption) (*ListSwapRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSwapRequestsResponse)
	err := c.cc.Invoke(ctx, ItemService_ListSwapRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) AddRating(ctx context.Context, in *AddRatingRequest, opts ...grpc.CallOption) (*Rating, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Rating)
	err := c.cc.Invoke(ctx, ItemService_AddRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetRatings(ctx context.Context, in *GetRatingsRequest, opts ...grpc.CallOption) (*GetRatingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRatingsResponse)
	err := c.cc.Invoke(ctx, ItemService_GetRatings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) Statistics(ctx context.Context, in *GetStatisticsRequest, opts ...grpc.CallOption) (*GetStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatisticsResponse)
	err := c.cc.Invoke(ctx, ItemService_Statistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) CreateEcoChallenge(ctx context.Context, in *CreateEcoChallengeRequest, opts ...grpc.CallOption) (*CreateEcoChallengeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEcoChallengeResponse)
	err := c.cc.Invoke(ctx, ItemService_CreateEcoChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) ParticipateEcoChallenge(ctx context.Context, in *ParticipateEcoChallengeRequest, opts ...grpc.CallOption) (*ParticipateEcoChallengeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParticipateEcoChallengeResponse)
	err := c.cc.Invoke(ctx, ItemService_ParticipateEcoChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) UpdateEcoChallengeProgress(ctx context.Context, in *UpdateEcoChallengeProgressRequest, opts ...grpc.CallOption) (*UpdateEcoChallengeProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEcoChallengeProgressResponse)
	err := c.cc.Invoke(ctx, ItemService_UpdateEcoChallengeProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) CreateEcoTip(ctx context.Context, in *CreateEcoTipRequest, opts ...grpc.CallOption) (*CreateEcoTipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEcoTipResponse)
	err := c.cc.Invoke(ctx, ItemService_CreateEcoTip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) GetEcoTips(ctx context.Context, in *GetEcoTipsRequest, opts ...grpc.CallOption) (*GetEcoTipsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEcoTipsResponse)
	err := c.cc.Invoke(ctx, ItemService_GetEcoTips_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemServiceServer is the server API for ItemService service.
// All implementations must embed UnimplementedItemServiceServer
// for forward compatibility
type ItemServiceServer interface {
	AddItemCategory(context.Context, *AddItemCategoryRequest) (*AddItemCategoryResponse, error)
	AddItem(context.Context, *AddItemRequest) (*ItemResponse, error)
	UpdateItem(context.Context, *UpdateItemRequest) (*ItemResponse, error)
	DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error)
	ListItems(context.Context, *ListItemsRequest) (*ListItemsResponse, error)
	GetItem(context.Context, *GetItemRequest) (*ItemResponse, error)
	SearchItems(context.Context, *SearchItemsRequest) (*ListItemsResponse, error)
	AddRecyclingCenter(context.Context, *AddRecyclingCenterRequest) (*RecyclingCenterResponse, error)
	SearchRecyclingCenters(context.Context, *SearchRecyclingCentersRequest) (*ListRecyclingCentersResponse, error)
	SubmitItemsForRecycling(context.Context, *SubmitItemsForRecyclingRequest) (*RecyclingSubmissionResponse, error)
	SendSwapRequest(context.Context, *SendSwapRequestRequest) (*SwapResponse, error)
	AcceptSwapRequest(context.Context, *AcceptSwapRequestRequest) (*SwapResponse, error)
	RejectSwapRequest(context.Context, *RejectSwapRequestRequest) (*SwapResponse, error)
	ListSwapRequests(context.Context, *ListSwapRequestsRequest) (*ListSwapRequestsResponse, error)
	AddRating(context.Context, *AddRatingRequest) (*Rating, error)
	GetRatings(context.Context, *GetRatingsRequest) (*GetRatingsResponse, error)
	Statistics(context.Context, *GetStatisticsRequest) (*GetStatisticsResponse, error)
	CreateEcoChallenge(context.Context, *CreateEcoChallengeRequest) (*CreateEcoChallengeResponse, error)
	ParticipateEcoChallenge(context.Context, *ParticipateEcoChallengeRequest) (*ParticipateEcoChallengeResponse, error)
	UpdateEcoChallengeProgress(context.Context, *UpdateEcoChallengeProgressRequest) (*UpdateEcoChallengeProgressResponse, error)
	CreateEcoTip(context.Context, *CreateEcoTipRequest) (*CreateEcoTipResponse, error)
	GetEcoTips(context.Context, *GetEcoTipsRequest) (*GetEcoTipsResponse, error)
	mustEmbedUnimplementedItemServiceServer()
}

// UnimplementedItemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedItemServiceServer struct {
}

func (UnimplementedItemServiceServer) AddItemCategory(context.Context, *AddItemCategoryRequest) (*AddItemCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItemCategory not implemented")
}
func (UnimplementedItemServiceServer) AddItem(context.Context, *AddItemRequest) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedItemServiceServer) UpdateItem(context.Context, *UpdateItemRequest) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedItemServiceServer) DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedItemServiceServer) ListItems(context.Context, *ListItemsRequest) (*ListItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItems not implemented")
}
func (UnimplementedItemServiceServer) GetItem(context.Context, *GetItemRequest) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedItemServiceServer) SearchItems(context.Context, *SearchItemsRequest) (*ListItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchItems not implemented")
}
func (UnimplementedItemServiceServer) AddRecyclingCenter(context.Context, *AddRecyclingCenterRequest) (*RecyclingCenterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecyclingCenter not implemented")
}
func (UnimplementedItemServiceServer) SearchRecyclingCenters(context.Context, *SearchRecyclingCentersRequest) (*ListRecyclingCentersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRecyclingCenters not implemented")
}
func (UnimplementedItemServiceServer) SubmitItemsForRecycling(context.Context, *SubmitItemsForRecyclingRequest) (*RecyclingSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitItemsForRecycling not implemented")
}
func (UnimplementedItemServiceServer) SendSwapRequest(context.Context, *SendSwapRequestRequest) (*SwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSwapRequest not implemented")
}
func (UnimplementedItemServiceServer) AcceptSwapRequest(context.Context, *AcceptSwapRequestRequest) (*SwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptSwapRequest not implemented")
}
func (UnimplementedItemServiceServer) RejectSwapRequest(context.Context, *RejectSwapRequestRequest) (*SwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectSwapRequest not implemented")
}
func (UnimplementedItemServiceServer) ListSwapRequests(context.Context, *ListSwapRequestsRequest) (*ListSwapRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSwapRequests not implemented")
}
func (UnimplementedItemServiceServer) AddRating(context.Context, *AddRatingRequest) (*Rating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRating not implemented")
}
func (UnimplementedItemServiceServer) GetRatings(context.Context, *GetRatingsRequest) (*GetRatingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRatings not implemented")
}
func (UnimplementedItemServiceServer) Statistics(context.Context, *GetStatisticsRequest) (*GetStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Statistics not implemented")
}
func (UnimplementedItemServiceServer) CreateEcoChallenge(context.Context, *CreateEcoChallengeRequest) (*CreateEcoChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEcoChallenge not implemented")
}
func (UnimplementedItemServiceServer) ParticipateEcoChallenge(context.Context, *ParticipateEcoChallengeRequest) (*ParticipateEcoChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipateEcoChallenge not implemented")
}
func (UnimplementedItemServiceServer) UpdateEcoChallengeProgress(context.Context, *UpdateEcoChallengeProgressRequest) (*UpdateEcoChallengeProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEcoChallengeProgress not implemented")
}
func (UnimplementedItemServiceServer) CreateEcoTip(context.Context, *CreateEcoTipRequest) (*CreateEcoTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEcoTip not implemented")
}
func (UnimplementedItemServiceServer) GetEcoTips(context.Context, *GetEcoTipsRequest) (*GetEcoTipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEcoTips not implemented")
}
func (UnimplementedItemServiceServer) mustEmbedUnimplementedItemServiceServer() {}

// UnsafeItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemServiceServer will
// result in compilation errors.
type UnsafeItemServiceServer interface {
	mustEmbedUnimplementedItemServiceServer()
}

func RegisterItemServiceServer(s grpc.ServiceRegistrar, srv ItemServiceServer) {
	s.RegisterService(&ItemService_ServiceDesc, srv)
}

func _ItemService_AddItemCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).AddItemCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_AddItemCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).AddItemCategory(ctx, req.(*AddItemCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_AddItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).AddItem(ctx, req.(*AddItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).UpdateItem(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_DeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).DeleteItem(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_ListItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).ListItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_ListItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).ListItems(ctx, req.(*ListItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_SearchItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).SearchItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_SearchItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).SearchItems(ctx, req.(*SearchItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_AddRecyclingCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecyclingCenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).AddRecyclingCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_AddRecyclingCenter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).AddRecyclingCenter(ctx, req.(*AddRecyclingCenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_SearchRecyclingCenters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRecyclingCentersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).SearchRecyclingCenters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_SearchRecyclingCenters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).SearchRecyclingCenters(ctx, req.(*SearchRecyclingCentersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_SubmitItemsForRecycling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitItemsForRecyclingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).SubmitItemsForRecycling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_SubmitItemsForRecycling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).SubmitItemsForRecycling(ctx, req.(*SubmitItemsForRecyclingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_SendSwapRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSwapRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).SendSwapRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_SendSwapRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).SendSwapRequest(ctx, req.(*SendSwapRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_AcceptSwapRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptSwapRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).AcceptSwapRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_AcceptSwapRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).AcceptSwapRequest(ctx, req.(*AcceptSwapRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_RejectSwapRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectSwapRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).RejectSwapRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_RejectSwapRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).RejectSwapRequest(ctx, req.(*RejectSwapRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_ListSwapRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSwapRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).ListSwapRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_ListSwapRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).ListSwapRequests(ctx, req.(*ListSwapRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_AddRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).AddRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_AddRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).AddRating(ctx, req.(*AddRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRatingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_GetRatings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetRatings(ctx, req.(*GetRatingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_Statistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).Statistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_Statistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).Statistics(ctx, req.(*GetStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_CreateEcoChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEcoChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).CreateEcoChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_CreateEcoChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).CreateEcoChallenge(ctx, req.(*CreateEcoChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_ParticipateEcoChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParticipateEcoChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).ParticipateEcoChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_ParticipateEcoChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).ParticipateEcoChallenge(ctx, req.(*ParticipateEcoChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_UpdateEcoChallengeProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEcoChallengeProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).UpdateEcoChallengeProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_UpdateEcoChallengeProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).UpdateEcoChallengeProgress(ctx, req.(*UpdateEcoChallengeProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_CreateEcoTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEcoTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).CreateEcoTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_CreateEcoTip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).CreateEcoTip(ctx, req.(*CreateEcoTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_GetEcoTips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEcoTipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).GetEcoTips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_GetEcoTips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).GetEcoTips(ctx, req.(*GetEcoTipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemService_ServiceDesc is the grpc.ServiceDesc for ItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "item.ItemService",
	HandlerType: (*ItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddItemCategory",
			Handler:    _ItemService_AddItemCategory_Handler,
		},
		{
			MethodName: "AddItem",
			Handler:    _ItemService_AddItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _ItemService_UpdateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _ItemService_DeleteItem_Handler,
		},
		{
			MethodName: "ListItems",
			Handler:    _ItemService_ListItems_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _ItemService_GetItem_Handler,
		},
		{
			MethodName: "SearchItems",
			Handler:    _ItemService_SearchItems_Handler,
		},
		{
			MethodName: "AddRecyclingCenter",
			Handler:    _ItemService_AddRecyclingCenter_Handler,
		},
		{
			MethodName: "SearchRecyclingCenters",
			Handler:    _ItemService_SearchRecyclingCenters_Handler,
		},
		{
			MethodName: "SubmitItemsForRecycling",
			Handler:    _ItemService_SubmitItemsForRecycling_Handler,
		},
		{
			MethodName: "SendSwapRequest",
			Handler:    _ItemService_SendSwapRequest_Handler,
		},
		{
			MethodName: "AcceptSwapRequest",
			Handler:    _ItemService_AcceptSwapRequest_Handler,
		},
		{
			MethodName: "RejectSwapRequest",
			Handler:    _ItemService_RejectSwapRequest_Handler,
		},
		{
			MethodName: "ListSwapRequests",
			Handler:    _ItemService_ListSwapRequests_Handler,
		},
		{
			MethodName: "AddRating",
			Handler:    _ItemService_AddRating_Handler,
		},
		{
			MethodName: "GetRatings",
			Handler:    _ItemService_GetRatings_Handler,
		},
		{
			MethodName: "Statistics",
			Handler:    _ItemService_Statistics_Handler,
		},
		{
			MethodName: "CreateEcoChallenge",
			Handler:    _ItemService_CreateEcoChallenge_Handler,
		},
		{
			MethodName: "ParticipateEcoChallenge",
			Handler:    _ItemService_ParticipateEcoChallenge_Handler,
		},
		{
			MethodName: "UpdateEcoChallengeProgress",
			Handler:    _ItemService_UpdateEcoChallengeProgress_Handler,
		},
		{
			MethodName: "CreateEcoTip",
			Handler:    _ItemService_CreateEcoTip_Handler,
		},
		{
			MethodName: "GetEcoTips",
			Handler:    _ItemService_GetEcoTips_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Item.proto",
}
